open Effppl.Infer
open Effppl.Print 

(*
	autoregressor model for time series analysis
	A first-order autoregressive model (AR(1)) with normal noise 
	takes each point y(n) in a sequence to be generated according to
		y(n) ~ Normal ( alpha + beta.y(n-1), sigma)
*)
let autoreg obs_points ay () =
	let* alp = normal 0. 3. in 
	let* bet = normal 1. 1. in 
	for i = 0 to (obs_points-2) do 
		observe ((mk ay.(i+1)) -. alp -. bet*.(mk ay.(i))) (Effppl.Primitive.logpdf Effppl.Primitive.(normal 0. 2.))
	done ;
	(mk 1.)
;; 

(*
	We generate the data with beta = 1.1
	and alpha = 2
*)
let epochs = 1000 in
let ls = [17.613035831567053 ;19.25687636968407 ;21.412221696758266 ;23.497960513960777 ;25.783200357377133 ;27.587113209984484 ;30.227454064279836 ;32.29570373725933 ;34.724037419336085 ;37.63356837162778 ;40.5605362468322 ;43.726063659406755 ;46.78506748325566 ;49.888426562201225 ;52.96552383487425 ;56.68538124341541 ;60.564925017020755 ;64.31345576427763 ;68.18414951615824 ;72.10718607686277 ;76.3411375082666 ;81.51747289550401 ;86.36024201502791 ;92.01672217035525 ;97.75400786645037 ;103.69886158307263 ;109.87367838012568 ;116.4761840231507 ;123.30557804453741 ;130.46302576926232 ;138.01269145697358 ;146.29123267501154 ;154.58240193335484 ;163.54013360843473 ;172.8354818739493 ;182.76829331717127 ;192.98561869726564 ;203.47928175716387 ;215.38054771707382 ;227.3697446370768 ;239.97987534722012 ;253.22201272168044 ;266.7230019054085 ;281.2678679687882 ;296.7594023991657 ;312.6148865932007 ;329.1672692381419 ;346.9617456468091 ;365.1279681651599 ;384.0967718282468 ;404.5439985781137 ;425.58838340267226 ;447.83333118042395 ;471.7255595867673 ;496.54813687236947 ;522.275561108046 ;549.4108318197399 ;578.1596219544838 ;607.5869068432684 ;639.004860555596 ;671.9076572565273 ;706.641401355516 ;742.929317816859 ;780.6503153081509 ;820.3561191949827 ;862.4170560582378 ;906.7841349536817 ;953.5126624637613 ;1002.1262454698518 ;1052.988605841884 ;1106.9091494814152 ;1163.2736885272932 ;1221.8621366615014 ;1284.0949044921115 ;1349.4783069637172 ;1417.7468521032517 ;1489.0561472180048 ;1564.3908532323683 ;1643.6709227926347 ;1726.4615654530419 ;1813.634914068341 ;1904.9946478475829 ;2000.9737518412508 ;2101.789337106942 ;2208.138142969218 ;2319.259722635811 ;2436.4414505426203 ;2559.1721998066364 ;2687.613964288841 ]in
let ax = Array.of_list ls in 
let obs = Array.length ax in 
let fils = (hmc (autoreg obs ax) 4 0.12 epochs) in

let mcl = List.map (fun ls -> (List.nth ls 0, List.nth ls 1)) fils in 
let sm =  List.map (fun (ax, _) -> ax) mcl in  
let sc =  List.map (fun (_, ay) -> ay) mcl in  

print_endline "===============================\nPrinting statistics for alpha\n===============================";
print_statistics sm;
print_endline "===============================\nPrinting statistics for beta\n===============================";
print_statistics sc;
(*
	The beta converges fast, but the alpha requires a lot of data, because of its lower relevance.
*)