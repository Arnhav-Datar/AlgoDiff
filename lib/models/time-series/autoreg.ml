open Effppl.Infer
open Effppl.Print 

(*
	autoregressor model for time series analysis
	A first-order autoregressive model (AR(1)) with normal noise 
	takes each point y(n) in a sequence to be generated according to
		y(n) ~ Normal ( alpha + beta.y(n-1), sigma)
*)
let autoreg obs_points ay () =
	let* alp = normal 1. 0.4 in 
	let* bet = normal 1. 1. in 
	let* l2 = (mk 0.) in
	for i = 0 to (obs_points-2) do 
		observe ((mk ay.(i+1)) -. alp -. bet*.(mk ay.(i))) (Effppl.Primitive.logpdf Effppl.Primitive.(normal 0. 1.))
	done ;
	l2
;; 

(*
	We generate the data with beta = 1.05
	and alpha = 2
*)
let epochs = 40000 in
let ls = [1.0 ;2.2253928905640623 ;3.162745396033899 ;4.452008664527824 ;5.726423904944754 ;7.420833725351775 ;8.603216890415165 ;9.461310914903457 ;10.353158536715066 ;11.681828452065968 ;13.391586055713159 ;15.12712208090198 ;16.65554752917729 ;18.55481658434175 ;20.46770632401984 ;22.40908100495154 ;24.460259478050656 ;26.546208227619488 ;28.59888753271883 ;31.01967575381383 ;34.12063638555921 ;36.7701021337287 ;39.85834577803413 ;43.09076558802404 ;45.84984047343763 ;48.932593471764214 ;52.151892668471575 ;55.89323262134454 ;59.404791787570765 ;62.918324442300104 ;67.30686251328824 ;71.4721321259454 ;76.34153641088446 ;81.32165656763573 ;86.23498858865516 ;91.46878842032959 ;97.21923584153252 ;103.21490028366603 ;109.52009096820618 ;116.1613967114 ;122.90553529501959 ;130.16354870650272 ;137.72763311668362 ;145.63220737312844 ;154.1884319660764 ;162.82273419507572 ;172.00663052289326 ;181.95348141787312 ;192.043490277782 ;202.84348614294424 ;214.0121066309827 ;225.45871408131467 ;237.64189915620668 ;250.63632386777167 ;264.3616593002109 ;278.8640702208331 ;293.7223063071872 ;309.51579453155875 ;325.65922744274144 ;342.5186455143034 ;360.20937353869124 ;379.48255010167685 ;399.7755617255114 ;420.5443503265542 ;442.7477724856755 ;465.98708396455424 ;490.11314159272695 ;515.4731809036801 ;542.2599171446034 ;570.060846180116 ;599.3684878464227 ;629.8923779727883 ;662.4689063291958 ;696.5173680211124 ;732.3549650583348 ;769.6951879049394 ;808.9522360084192 ;850.3223123188432 ;893.957720451012 ;940.1622189972633 ;988.0247392720662 ;1038.2278020436515 ;1091.2091650748237 ;1146.8982712758002 ;1205.0313692851946 ;1266.2780884275155 ;1330.7115601836524 ;1398.2676101612221 ;1469.467110850617 ;1543.8935244754464 ;1622.1832755654737 ;1704.8354443595244 ;1791.1948829207097 ;1881.3045489639505 ;1976.7894449470969 ;2076.393898459221 ;2180.7730266396725 ;2290.886601066657 ;2405.955776841273 ;2527.1540902665392 ;2654.6832230547493 ]in
let ax = Array.of_list ls in 
let obs = Array.length ax in 
let fils = (hmc (autoreg obs ax) 4 0.005 epochs) in

let mcl = List.map (fun ls -> (List.nth ls 0, List.nth ls 1)) fils in 
let sm =  List.map (fun (ax, _) -> ax) mcl in  
let sc =  List.map (fun (_, ay) -> ay) mcl in  

print_endline "===============================\nPrinting statistics for alpha\n===============================";
print_statistics sm;
print_endline "===============================\nPrinting statistics for beta\n===============================";
print_statistics sc;
(*
	The beta converges fast, but the alpha requires a lot of data, because of its lower relevance.
*)
(* print_normal_list sm; *)